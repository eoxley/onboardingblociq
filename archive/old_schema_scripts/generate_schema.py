"""
Generate accurate schema mappings from Supabase database
This script queries the actual database schema and generates a Python schema mapping
"""

import psycopg2
import json
from typing import Dict, List

# Supabase connection
SUPABASE_HOST = "aws-0-eu-west-1.pooler.supabase.com"
SUPABASE_PORT = 5432
SUPABASE_DB = "postgres"
SUPABASE_USER = "postgres.xqxaatvykmaaynqeoemy"
SUPABASE_PASSWORD = "Sophiaisaboy1238"

# Tables we care about
TABLES = [
    'buildings', 'units', 'leaseholders', 'leases', 'budgets',
    'compliance_assets', 'building_insurance', 'building_staff',
    'major_works_projects', 'building_contractors', 'schedules',
    'apportionments', 'building_keys_access', 'timeline_events',
    'building_documents'
]

def get_table_schema(cursor, table_name: str) -> Dict:
    """Extract schema for a specific table"""
    query = """
    SELECT
        column_name,
        data_type,
        is_nullable,
        column_default,
        character_maximum_length
    FROM information_schema.columns
    WHERE table_schema = 'public'
    AND table_name = %s
    ORDER BY ordinal_position;
    """

    cursor.execute(query, (table_name,))
    columns = cursor.fetchall()

    schema = {}
    for col in columns:
        col_name, data_type, is_nullable, col_default, max_length = col

        # Build schema string
        schema_str = data_type

        # Add max length for varchar/character varying
        if max_length and data_type in ('character varying', 'varchar'):
            schema_str = f"{data_type}({max_length})"

        # Add NOT NULL constraint
        if is_nullable == 'NO':
            schema_str += " NOT NULL"

        # Add default value
        if col_default:
            # Simplify common defaults
            if col_default.startswith('gen_random_uuid()'):
                schema_str += " DEFAULT gen_random_uuid()"
            elif col_default.startswith('uuid_generate_v4()'):
                schema_str += " DEFAULT uuid_generate_v4()"
            elif col_default.startswith('now()'):
                schema_str += " DEFAULT now()"
            elif col_default not in ['NULL', None]:
                schema_str += f" DEFAULT {col_default}"

        schema[col_name] = schema_str

    return schema

def generate_python_schema(schemas: Dict[str, Dict]) -> str:
    """Generate Python code for schema_mapper.py"""
    lines = []
    lines.append("# AUTO-GENERATED FROM ACTUAL SUPABASE DATABASE SCHEMA")
    lines.append("# Generated by generate_schema.py")
    lines.append("")
    lines.append("SUPABASE_SCHEMAS = {")

    for table_name in sorted(schemas.keys()):
        lines.append(f"    '{table_name}': {{")
        for col_name, col_schema in schemas[table_name].items():
            lines.append(f"        '{col_name}': '{col_schema}',")
        lines.append("    },")

    lines.append("}")

    return "\n".join(lines)

def main():
    """Main execution"""
    print("üîç Connecting to Supabase...")

    conn = psycopg2.connect(
        host=SUPABASE_HOST,
        port=SUPABASE_PORT,
        database=SUPABASE_DB,
        user=SUPABASE_USER,
        password=SUPABASE_PASSWORD
    )

    cursor = conn.cursor()

    print("üìä Extracting schemas for key tables...")
    schemas = {}

    for table in TABLES:
        print(f"  - {table}")
        schema = get_table_schema(cursor, table)
        if schema:
            schemas[table] = schema
        else:
            print(f"    ‚ö†Ô∏è  Table {table} not found")

    print(f"\n‚úÖ Extracted {len(schemas)} table schemas")

    # Generate Python code
    python_code = generate_python_schema(schemas)

    # Write to file
    output_file = "/Users/ellie/onboardingblociq/supabase_actual_schema.py"
    with open(output_file, 'w') as f:
        f.write(python_code)

    print(f"üìù Written schema to {output_file}")

    # Also generate JSON for inspection
    json_file = "/Users/ellie/onboardingblociq/supabase_schema.json"
    with open(json_file, 'w') as f:
        json.dump(schemas, f, indent=2)

    print(f"üìã Written JSON schema to {json_file}")

    cursor.close()
    conn.close()

    print("\nüéâ Schema extraction complete!")

if __name__ == '__main__':
    main()
